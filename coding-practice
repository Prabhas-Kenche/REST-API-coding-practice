const express = require('express')
const path = require('path')

const {open} = require('sqlite')
const sqlite3 = require('sqlite3')

const app = express()
app.use(express.json())
const dbPath = path.join(__dirname, 'todoApplication.db')

let db = null

const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('Server Running at http://localhost:3000/')
    })
  } catch (e) {
    console.log(`DB Error: ${e.message}`)
    process.exit(1)
  }
}

initializeDBAndServer()

const convertDbObjectToResponseObject = dbObject => {
  return {
    id: dbObject.id,
    todo: dbObject.todo,
    priority: dbObject.priority,
    status: dbObject.status,
  }
}

//API - 1
app.get('/todos/', async (request, response) => {
  let data = null
  let getTodoQuery = ''
  const {search_q = '', priority, status} = request.query

  const hasPriorityAndStatusProperties = requestQuery => {
    return (
      requestQuery &&
      requestQuery.priority !== undefined &&
      requestQuery.status !== undefined
    )
  }

  const hasPriorityProperty = requestQuery => {
    return requestQuery && requestQuery.priority !== undefined
  }

  const hasStatusProperty = requestQuery => {
    return requestQuery && requestQuery.status !== undefined
  }

  switch (true) {
    case hasPriorityAndStatusProperties(request.query):
      getTodoQuery = `
        SELECT
          *
        FROM
          todo
        WHERE
          todo LIKE '%${search_q}%'
          AND status = '${status}'
          AND  priority = '${priority}';`
      break

    case hasPriorityProperty(request.query):
      getTodoQuery = `
        SELECT
          *
        FROM
          todo
        WHERE
          todo LIKE '%${search_q}%'
          AND priority = '${priority}';`
      break

    case hasStatusProperty(request.query):
      getTodoQuery = `
        SELECT
          *
        FROM
          todo
        WHERE
          todo like '%${search_q}%'
          AND status = '${status}'`
      break

    default:
      getTodoQuery = `
      SELECT
        *
      FROM
        todo
      WHERE
        todo like '%${search_q}%'`
  }
  data = await db.all(getTodoQuery)
  response.send(data.map(eachItem => convertDbObjectToResponseObject(eachItem)))
})

//API - 2
app.get('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params
  const getTodoQuery = `
  SELECT
    *
  FROM
    todo
  WHERE
    id = ${todoId};`
  const data = await db.all(getTodoQuery)
  const onlySend = data.map(eachItem =>
    convertDbObjectToResponseObject(eachItem),
  )
  response.send(onlySend[0])
})

//API - 3
app.post('/todos/', async (request, response) => {
  const {todo, priority, status} = request.body
  const insertTodo = `
      INSERT INTO
        todo (todo, priority, status)
      VALUES 
      (
        '${todo}',
        '${priority}',
        '${status}'
      );`
  await db.run(insertTodo)
  response.send('Todo Successfully Added')
})

//API - 4
app.put('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.body
  let updateColumn = ''
  const requestBody = request.body
  switch (true) {
    case requestBody.status !== undefined:
      updateColumn = 'Status'
      break
    case requestBody.priority !== undefined:
      updateColumn = 'Priority'
      break
    case requestBody.todo !== undefined:
      updateColumn = 'Todo'
      break
  }

  const previousTodoQuery = `
  SELECT
    *
  FROM
    todo
  WHERE
    id = ${todoId};`

  const previousTodo = await db.get(previousTodoQuery)

  const {
    todo = previousTodo.todo,
    priority = previousTodo.priority,
    status = previousTodo.status,
  } = request.body

  const updateTodoQuery = `
  UPDATE
    todo
  SET
    todo='${todo}',
    priority='${priority}',
    status='${status}'
  WHERE
    id=${todoId};`

  await db.run(updateTodoQuery)
  response.send(`${updateColumn} Updated`)
})

//API - 5
app.delete('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params
  const deleteTodoQuery = `
    DELETE FROM
      todo
    WHERE
      id = ${todoId};`
  await db.run(deleteTodoQuery)
  response.send('Book Deleted Successfully')
})

module.exports = app
